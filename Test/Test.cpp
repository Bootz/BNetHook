#include <iostream>

#include "RC4Crypt.h"
#include "HMACSHA1.h"
#include "HMACSHA256.h"
#include "SHA1Hash.h"
#include "BigNumber.h"

#pragma comment(lib, "libeay32.lib")

int main()
{
	uint8_t bSessionKey1[] = {0xA1, 0x56, 0x39, 0x38, 0xF2, 0x92, 0xCE, 0x38, 0xB5, 0xD5, 0xF5, 0xD9, 0xDC, 0x62, 0xD4, 0x91, 0x28, 0x12, 0x51, 0x17};
	uint8_t bSessionKey2[] = {0x42, 0x29, 0x4C, 0x97, 0x48, 0xA5, 0xBF, 0x9E, 0x49, 0xDB, 0x39, 0x3B, 0xF2, 0x92, 0xA6, 0x9E, 0x93, 0xC1, 0xA6, 0x6F, };
	uint8_t bRandomData[20] = {0};
	uint8_t bRandomSource1[20] = {0};
	uint8_t bRandomSource2[20] = {0};
	SHA1(bSessionKey1, 20, bRandomSource1);
	SHA1(bSessionKey2, 20, bRandomSource2);
	
	SHA_CTX mCtx;
	SHA1_Init(&mCtx);
	
	// compute hash
	SHA1_Update(&mCtx, bRandomSource1, 20);
	SHA1_Update(&mCtx, bRandomData, 20);
	SHA1_Update(&mCtx, bRandomSource2, 20);
	
	// finalize
	SHA1_Final(bRandomData, &mCtx);
	
	uint8_t position = 0;
	uint8_t key[16] = {0};
	for (uint8_t i=0; i<16; ++i)
	{
		if (position >= 20)
		{
			SHA1_Init(&mCtx);
			SHA1_Update(&mCtx, bRandomSource1, 20);
			SHA1_Update(&mCtx, bRandomData, 20);
			SHA1_Update(&mCtx, bRandomSource2, 20);
			SHA1_Final(bRandomData, &mCtx);
			position = 0;
		}
		key[i] = bRandomData[position];
		++position;
	}
	RC4Crypt clientCrypt(std::vector<uint8_t>(key, key + 16));
	
	for (uint8_t i=0; i<16; ++i)
		key[i]=0;

	for (uint8_t i=0; i<16; ++i)
	{
		if (position >= 20)
		{
			SHA1_Init(&mCtx);
			SHA1_Update(&mCtx, bRandomSource1, 20);
			SHA1_Update(&mCtx, bRandomData, 20);
			SHA1_Update(&mCtx, bRandomSource2, 20);
			SHA1_Final(bRandomData, &mCtx);
			position = 0;
		}
		key[i] = bRandomData[position];
		++position;
	}
	RC4Crypt serverCrypt(std::vector<uint8_t>(key, key + 16));
	
	uint8_t temp1[] = {0xC9, 0x7B, 0xF5, 0x3F, 0x45, 0x95, 0xBC, 0x4B, 0xC4, 0x42, 0x91, 0xE9, 0x3C, 0x5D, 0xBD, 0xB0, 0x06, 0x0B, 0x4C, 0x71, 0x20, 0xE0, 0x91, 0x32, 0x27, 0x81, 0x75, 0x73, 0x0B, 0x79, 0xB0, 0x0C, 0x4B, 0x29, 0xF5, 0x8B, 0x11};
	std::vector<uint8_t> tempdata = serverCrypt.Process(std::vector<uint8_t>(temp1, temp1 + 37));

	uint8_t temp2[] = {0xAD};
	tempdata = clientCrypt.Process(std::vector<uint8_t>(temp2, temp2 + 1));

	uint8_t temp3[] = {0x02, 0x85, 0xFE, 0xF5, 0x08, 0x4E, 0x15, 0xBC, 0x8C, 0xFD, 0xFB, 0x74, 0x0E, 0xB8, 0xD7, 0x17, 0x11, 0x3C, 0x84, 0x27, 0x7B, 0xE2, 0xF6, 0x70, 0xC5, 0x35, 0x20, 0xED, 0x6C, 0x22, 0xB8, 0x90, 0xE7, 0xE4, 0x73, 0x31, 0x52, 0xCA, 0xFC, 0x20, 0xD7, 0x76, 0x77, 0xCE, 0xB5, 0x24, 0xF5, 0xD0, 0xDA, 0xCA, 0x4C, 0x9F, 0x5D, 0x88, 0x26, 0xAB, 0x4F, 0xE5, 0x35, 0xA0, 0xE0, 0x1E, 0x85, 0xAD, 0x7C, 0xBB, 0x11, 0x08, 0xFB, 0xBA, 0x5D, 0x70, 0xD7, 0x94, 0x01, 0xE9, 0x09, 0x36, 0x84, 0x6C, 0xE9, 0xC2, 0xFE, 0xB1, 0xC3, 0xA8, 0x50, 0x08, 0x40, 0xF5, 0x82, 0xB1, 0xC5, 0x5B, 0x7D, 0xC5, 0x78, 0x12, 0x44, 0xF4, 0x63, 0x54, 0x8C, 0xD7, 0x30, 0x89, 0xB0, 0x71, 0xE8, 0x8C, 0xBF, 0x33, 0x67, 0x36, 0xB0, 0xC4, 0x23, 0xFB, 0xC2, 0x97, 0x40, 0x23, 0x6D, 0xBE, 0x6A, 0xCD, 0x56, 0x05, 0x9A, 0x5F, 0x77, 0x28, 0xD5, 0x0F, 0xD8, 0x07, 0xA0, 0xED, 0x07, 0xD3, 0x9B, 0x28, 0xAC, 0xA1, 0xA0, 0x4F, 0xC1, 0x76, 0xDA, 0x5A, 0xBC, 0x1A, 0x05, 0x7D, 0xA0, 0xF8, 0x31, 0xEE, 0x65, 0xAC, 0xE6, 0xF3, 0x2F, 0xF8, 0x0E, 0x8B, 0x8B, 0xE0, 0x41, 0x05, 0x92, 0x06, 0x44, 0x12, 0x76, 0x21, 0x91, 0xD5, 0xFD, 0x82, 0xDA, 0xE0, 0x34, 0x7C, 0x19, 0x19, 0x03, 0x78, 0x6F, 0xDC, 0x92, 0xB4, 0xB0, 0xF6, 0xC3, 0x54, 0x51, 0xD2, 0x30, 0xC7, 0xA3, 0x85, 0x85, 0xB7, 0x62, 0x56, 0x0A, 0x1D, 0xB2, 0x4D, 0xDC, 0x04, 0x04, 0xA3, 0xEB, 0x8B, 0xDF, 0x58, 0xED, 0x04, 0xC6, 0x78, 0x50, 0x08, 0xCE, 0x8B, 0xC5, 0x7F, 0xCF, 0x53, 0x51, 0x78, 0x97, 0xC1, 0x8D, 0x3D, 0xEB, 0xA0, 0xD5, 0x38, 0xE1, 0xC4, 0x49, 0x68, 0xEB, 0x2F, 0x73, 0x85, 0x77, 0x84, 0xE8, 0x9D, 0xF2, 0xAB, 0x8E, 0x19, 0xE5, 0xAC, 0x57, 0x22, 0xF1, 0x40, 0xDC, 0xCF, 0xFA, 0xD9, 0xA1, 0x9C, 0x12, 0x46, 0xD2, 0xE8, 0x36, 0x76, 0xFA, 0x0A, 0x2F, 0xB6, 0xB2, 0xBC, 0xC4, 0x25, 0xF0, 0x01, 0x8D, 0xCC, 0xCA, 0xA1, 0x74, 0xB7, 0x45, 0xA2, 0x9D, 0xEB, 0xB2, 0x3B, 0x56, 0xD6, 0x07, 0x1F, 0xAB, 0x75, 0x7B, 0xB4, 0xBD, 0x7A, 0x88, 0x82, 0x92, 0x9F, 0x58, 0x48, 0xFE, 0xC5, 0x98, 0xEC, 0x7A, 0x85, 0xF9, 0xE7, 0xCE, 0x63, 0x2B, 0x07, 0x12, 0x99, 0x53, 0x87, 0x6E, 0x2B, 0x0B, 0xC7, 0x5D, 0x67, 0x9B, 0x3D, 0xB5, 0x71, 0xBB, 0xF8, 0x87, 0xDE, 0x90, 0x3C, 0x14, 0xAC, 0x77, 0xE0, 0x50, 0x4F, 0x70, 0x80, 0xF4, 0xB6, 0x1B, 0x6A, 0x22, 0x2F, 0x14, 0xFE, 0xC9, 0x6F, 0xE8, 0xEF, 0x79, 0x43, 0x9E, 0xB7, 0x8D, 0xE3, 0x1F, 0x7F, 0x0D, 0x37, 0x54, 0x5A, 0xA7, 0xC7, 0x40, 0x61, 0x36, 0xD8, 0x05, 0xE0, 0x13, 0xF1, 0xA4, 0x61, 0xA2, 0x50, 0xA8, 0x97, 0x5B, 0x3E, 0xC7, 0xFB, 0x05, 0x47, 0x8D, 0x8D, 0xCF, 0x08, 0x0C, 0x3C, 0xBB, 0x2B, 0xB8, 0xA0, 0x87, 0x99, 0x4A, 0xB1, 0x81, 0xB0, 0xB8, 0x90, 0x91, 0x5E, 0xCF, 0xE1, 0x39, 0xF8, 0x99, 0x78, 0xDB, 0x31, 0x5C, 0xC5, 0xD0, 0x71, 0x30, 0xF2, 0x67, 0x36, 0xFB, 0x23, 0x70, 0xEE, 0x4A, 0x47, 0x1F, 0x70, 0xDB, 0x68, 0x03, 0xAE, 0x00, 0xBA, 0x26, 0x39, 0xD5, 0x32, 0xEF, 0x41, 0xC0, 0x52, 0xDC, 0xDC, 0x68, 0x4F, 0x02, 0xCB, 0x66, 0x1F, 0xDF, 0xF1, 0x33, 0xBC, 0x7B, 0x79, 0xD3, 0xA9, 0x08, 0xA7, 0x34, 0x62, 0x4C, 0x9D, 0x65, 0x3A, 0x8B, 0x6B, 0x6B, 0xFB, 0x26, 0xA8, 0xB5, 0x97, 0xFF, 0xFA, 0xFE, 0x0B, 0xE6, 0x61, 0x48, 0x54, 0x26, 0x98, 0x5D, 0x4B, 0x86, 0xF6, 0x2B};
	tempdata = serverCrypt.Process(std::vector<uint8_t>(temp3, temp3 + 503));

	uint8_t temp4[] = {0xCB};
	tempdata = clientCrypt.Process(std::vector<uint8_t>(temp4, temp4 + 1));
	uint8_t temp5[] = {0x1E, 0xC1, 0x9A, 0xB1, 0x79, 0xA0, 0xF4, 0x6F, 0xDE, 0x23, 0x6B, 0x49, 0xC2, 0x7F, 0x45, 0x7B, 0xA5, 0x32, 0x94, 0x07, 0x8D, };
	tempdata = clientCrypt.Process(std::vector<uint8_t>(temp5, temp5 + 21));
}